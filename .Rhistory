proj_titles <- c()
proj_fileFormats <- c()
proj_genusSpecies <- c()
proj_instrumentManufacturerModels <- c()
proj_organs <- c()
num_hits <- length(X)
print(paste('num_hits:', num_hits))
for (hit_ind in 1:num_hits){
current_hit <- X[[hit_ind]]
# get project details
num_projs <- length(current_hit$projects)
for (proj_ind in 1:num_projs){
current_proj <- current_hit$projects[[proj_ind]]
proj_titles <- append(proj_titles, current_proj$projectTitle)
proj_fileFormats <- append(proj_fileFormats, current_proj$fileTypeSummary[[1]]$fileType)
proj_genusSpecies <- append(proj_genusSpecies, current_proj$donorOrganisms[[1]]$genusSpecies[[1]])
proj_instrumentManufacturerModels <- append(proj_instrumentManufacturerModels,
current_proj$protocols[[2]]$instrumentManufacturerModel)
proj_organs <- append(proj_organs, current_proj$specimens[[1]]$organs[[1]])
}
}
tibble(title = proj_titles,
fileFormat = proj_fileFormats,
genusSpecies = proj_genusSpecies,
instrumentManufacturerModel = proj_instrumentManufacturerModels,
organ = proj_organs)
}
# parameters are just some of the supported facets
projects <- function(fileFormat = character(0),
genusSpecies = character(0),
instrumentManufacturerModel = character(0),
organ = character(0),
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
projects(genusSpecies = "Homo sapiens")
# parameters are just some of the supported facets
projects <- function(fileFormat = character(0),
genusSpecies = character(0),
instrumentManufacturerModel = character(0),
organ = character(0),
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(genusSpecies = "Homo sapiens")
fin
View(fin)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(httr)
library(jsonlite)
library(dplyr)
# construct a query filter (aiming for `{"organ" : {"is" : ["pancreas"]}}`)
r_filter <- list(
organ = list(
is = "pancreas"
)
)
# takes list and makes it json
json_filter <- jsonlite::toJSON(r_filter)
# need to encode url so that curly braces are not escaped, but treated as legal characters
encoded_filter <- utils::URLencode(json_filter, reserved = TRUE)
encoded_filter
# putting together base url, endpoint, and other parameters
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = "dcp2",
filters = encoded_filter,
size = 100,
sort = "projectTitle",
order = "asc"
)
# further parameter processing; do names(params) to get parameter key names
names(params)
param_key_value <- paste(names(params), params, sep="=")
param_key_value
# format the query by collapsing into single string separated by `&`
query <- paste(param_key_value, collapse = "&")
query
# form the URL for the GET query
# paste with no sep
url <- paste0(
base_url,
endpoint,
"?",
query
)
url
# Now that we have url, make request using `httr` package
# wrapping in a try-catch block
response <- httr::GET(url)
tryCatch({
httr::stop_for_status(response) # make sure response code isn't 400 or higher
}, error = function(e) {
## convert error into a simple 'message' so execution continues
message(e)
})
# output headers as a string
httr::headers(response) %>%
utils::str()
# response content
lst <- httr::content(response)
# lst
names(lst)
lengths(lst)
names(lst$hits[[1]])
t1 <- lst$hits[[1]]$projects[[1]]$projectTitle
t1
t2 <- lst[["hits"]][[1]][["projects"]][[1]][["projectTitle"]]
t2
identical(t1, t2)
# function for extracting project titles
extract_proj_titles <- function(X = list()){
# print(identical(X, lst[["hits"]]))
proj_titles <- c()
num_hits <- length(X)
# print(paste('num_hits:', num_hits))
for (hit_ind in 1:num_hits){
current_hit <- X[[hit_ind]]
num_projs <- length(current_hit$projects)
for (proj_ind in 1:num_projs){
current_proj <- current_hit$projects[[proj_ind]]
proj_titles <- append(proj_titles, current_proj$projectTitle)
}
}
return(proj_titles)
}
sapply(X = list(lst$"hits"), FUN = extract_proj_titles)
names(lst$pagination)
lst$pagination
# pagination i.e. the number of pages the results make up, given a specific break point
# there are only 4 hits, they all fit on one page
# the hits are sorted in ascending order on the basis of projectTitle
names(lst$termFacets)
lst$termFacets
# contains a summary of the facets available for composing filters, and the various values those facets take on withing the results of the query
construct_query_filter <- function(r_filter = list(), base_url = "https://service.dev.singlecell.gi.ucsc.edu", endpoint = "/index/projects", params = list()){
# takes list and makes it json
json_filter <- toJSON(r_filter)
# need to encode url so that curly braces are not escaped, but treated as legal characters
encoded_filter <- utils::URLencode(json_filter, reserved = TRUE)
# add encoded filter to params
# help from: https://www.datamentor.io/r-programming/list/
params[["filters"]] <- encoded_filter
# further parameter processing; do names(params) to get parameter key names
param_key_value <- paste(names(params), params, sep="=")
# format the query by collapsing into single string separated by `&`
query <- paste(param_key_value, collapse = "&")
# form the URL for the GET query
# paste with no sep
# url automatically returned as it is the last statement in the function
url <- paste0(
base_url,
endpoint,
"?",
query
)
}
hca_api_call <- function(url = ''){
response <- httr::GET(url)
tryCatch({
httr::stop_for_status(response) # make sure response code isn't 400 or higher
}, error = function(e) {
## convert error into a simple 'message' so execution continues
message(e)
})
# help returning multiple values: https://stackoverflow.com/questions/8936099/returning-multiple-objects-in-an-r-function
headers <- httr::headers(response) %>%
utils::str()
content <- httr::content(response)
resp <- list("headers" = headers, "content" = content)
return(resp)
}
# putting it all together
hca_base_call <- function(r_filter = list(), base_url = "https://service.dev.singlecell.gi.ucsc.edu", endpoint = "/index/projects", params = list()){
url <- construct_query_filter(r_filter, base_url, endpoint, params)
resp <- hca_api_call(url)
return(resp)
}
# construct a query filter (aiming for `{"organ" : {"is" : ["pancreas"]}}`)
r_filter <- list(
organ = list(
is = "pancreas"
)
)
# putting together base url, endpoint, and other parameters
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc"
)
out <- hca_base_call(r_filter = r_filter, base_url = base_url, endpoint = endpoint, params = params)
out$headers
out$content
# function for extracting project titles
extract_proj_details <- function(X = list()){
# print(identical(X, lst[["hits"]]))
proj_titles <- c()
proj_fileFormats <- c()
proj_genusSpecies <- c()
proj_instrumentManufacturerModels <- c()
proj_organs <- c()
num_hits <- length(X)
print(paste('num_hits:', num_hits))
for (hit_ind in 1:num_hits){
current_hit <- X[[hit_ind]]
# get project details
num_projs <- length(current_hit$projects)
for (proj_ind in 1:num_projs){
current_proj <- current_hit$projects[[proj_ind]]
proj_titles <- append(proj_titles, current_proj$projectTitle)
proj_fileFormats <- append(proj_fileFormats, current_proj$fileTypeSummary[[1]]$fileType)
proj_genusSpecies <- append(proj_genusSpecies, current_proj$donorOrganisms[[1]]$genusSpecies[[1]])
proj_instrumentManufacturerModels <- append(proj_instrumentManufacturerModels,
current_proj$protocols[[2]]$instrumentManufacturerModel)
proj_organs <- append(proj_organs, current_proj$specimens[[1]]$organs[[1]])
}
}
tibble(title = proj_titles,
fileFormat = proj_fileFormats,
genusSpecies = proj_genusSpecies,
instrumentManufacturerModel = proj_instrumentManufacturerModels,
organ = proj_organs)
}
# parameters are just some of the supported facets
projects <- function(fileFormat = character(0),
genusSpecies = character(0),
instrumentManufacturerModel = character(0),
organ = character(0),
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(genusSpecies = "Homo sapiens")
fin
# parameters are just some of the supported facets
projects <- function(fileFormat = character(0),
genusSpecies = character(0),
instrumentManufacturerModel = character(0),
organ = character(0),
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
print(query_results)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(genusSpecies = "Homo sapiens")
fin
# parameters are just some of the supported facets
projects <- function(fileFormat = NA,
genusSpecies = NA,
instrumentManufacturerModel = NA,
organ = NA,
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
print(query_results)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(genusSpecies = "Homo sapiens")
fin
# parameters are just some of the supported facets
projects <- function(organ = "pancreas",
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
print(query_results)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(genusSpecies = "Homo sapiens")
# parameters are just some of the supported facets
projects <- function(organ = "",
catalog = "dcp2",
size = 100,
sort = "projectTitle",
order = "asc") {
## query for appropriate projects -- httr::GET(...)
r_filter <- list(
fileFormat = list(
is = fileFormat
),
genusSpecies = list(
is = genusSpecies
),
instrumentManufacturerModel = list(
is = instrumentManufacturerModel
),
organ = list(
is = organ
)
)
base_url <- "https://service.dev.singlecell.gi.ucsc.edu"
endpoint <- "/index/projects"
params <- list(
catalog = catalog,
size = size,
sort = sort,
order = order
)
query_results <- hca_base_call(r_filter = r_filter,
base_url = base_url,
endpoint = endpoint,
params = params)
print(query_results)
## transform the results into a tibble with 1 row per project,
## and additional information about each project, e.g., genusSpecies,
## as columns
## tibble(projectTitle = ..., genusSpecies = ..., ...)
output <- sapply(query_results$content[["hits"]], extract_proj_details)
}
fin <- projects(organ = "pancreas")
