% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lol.R
\name{list-of-lists}
\alias{list-of-lists}
\alias{.lol_visit}
\alias{.lol_visit.list}
\alias{.lol_visit.default}
\alias{lol_find}
\alias{lol_count}
\title{Utilities for manipulating lists-of-lists}
\usage{
lol_find(
  x = list(),
  key = "",
  not_in = character(),
  simplify = TRUE,
  filter = NA_character_
)

lol_count(x = list(), key = "", not_in = character(), filter = NA_character_)
}
\arguments{
\item{x}{list(), possibly containing other lists.}

\item{key}{character(1) desired node name.}

\item{not_in}{character() of node(s) whose descendants are excluded
from matching \code{key}.}

\item{simplify}{logical(1) when TRUE, \code{unlist()} the result to
return a named character() vector, where elements correspond
node values matching \code{key}, and names describe the named path
to the node. When FALSE, a list-of-lists reflecting the
structure of the data leading to each \code{key}. See examples.}

\item{filter}{character(1) regular expression matching paths to be
returned. Must be NA if \code{simplify} is FALSE.}
}
\value{
\code{lol_find()} returns a named character vector when
\code{simplify = TRUE}. The names represent the paths to each node
matching \code{key}, and the elements correspond to the value of the
node.\preformatted{`lol_find()` returns a list-of-lists when `simplify =
FALSE`. The list-of-lists reflects the list structure of `x`,
but trimmed to only include paths leading to `key`, and the
value of the key.
}

\code{lol_count()} returns an integer(1) count of the number of
elements matching \code{key}, subject to other arguments of the
function.
}
\description{
\code{lol_find()} searches a list-of-lists \code{x} for nodes
with name \code{key}. The form and content of the output is
determined by \code{simplify} and \code{filter}.

\code{lol_count()} returns the number of nodes named \code{key},
following the same rules as \code{lol_find()}.
}
\examples{
lol <- list(a = list(b = 1), a = list(b = 2))
lol_find(lol, "b")
lol_count(lol, "b")

lol <- list(list(b = 1), a = list(b = 2))
lol_find(lol, "b")
lol_find(lol, "b", not_in = "a")
lol_find(lol, "b", filter = "a.b")
str( lol_find(lol, "b", simplify = FALSE) )

lol <- list(list(b = 1), a = list(b = 2), c = list(b = 3))
lol_count(lol, "a")
lol_count(lol, "b")
lol_count(lol, "b", not_in = "a")
lol_count(lol, "b", not_in = c("a", "c"))

}
