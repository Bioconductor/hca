% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lol.R
\name{list-of-lists}
\alias{list-of-lists}
\alias{.lol_visit}
\alias{.lol_visit.list}
\alias{.lol_visit.default}
\alias{lol_find}
\alias{lol_count}
\title{Utilities for manipulating lists-of-lists}
\usage{
lol_find(x = list(), key = "", not_in = character(), filter = NA_character_)

lol_count(x = list(), key = "", not_in = character(), filter = NA_character_)
}
\arguments{
\item{x}{list(), possibly containing other lists.}

\item{key}{character() desired node name, or word-sufffix of path
to nodes of interest, e.g., \code{"a.b"} finds "b" nodes that are
children of "a" nodes.}

\item{not_in}{character() of node(s) whose descendants are excluded
from matching \code{key}.}

\item{filter}{character(1) regular expression matching paths to be
returned. Must be NA if \code{simplify} is FALSE.}
}
\value{
\code{lol_find()} returns a named character vector. The names
represent the paths to each node matching \code{key}, and the
elements correspond to the value of the node. Named keys with
empty elements are represented as \code{NA}.

\code{lol_count()} returns an integer(1) count of the number of
elements matching \code{key}, subject to other arguments of the
function.
}
\description{
\code{lol_find()} searches a list-of-lists \code{x} for nodes
with name \code{key}, returning a named vector of scalar-valued
keys.

\code{lol_count()} returns the number of nodes named \code{key},
following the same rules as \code{lol_find()}.
}
\examples{
lol <- list(a = list(b = 1), a = list(b = 2))
lol_find(lol, "b")
lol_count(lol, "b")

lol <- list(list(b = 1), a = list(b = 2))
lol_find(lol, "b")
lol_find(lol, "b", not_in = "a")
str( lol_find(lol, "b") )

## empty key
lol_find(list(a = list(), a = list(1)), "a")  # c(NA, 1)

## 'a.b': choose 'b' nodes that are children of 'a' nodes
lol <- list(a = list(b = 1), c = list(b = 2))
lol_find(lol, "a.b")
lol_find(lol, "b", filter = "a.b")  # same as previous, but less robust
lol <- list(list(b = 1), a = list(b = 2), c = list(b = 3))
lol_count(lol, "a")
lol_count(lol, "b")
lol_count(lol, "b", not_in = "a")
lol_count(lol, "b", not_in = c("a", "c"))

}
